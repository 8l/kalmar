#!/bin/bash
# Compiles an LLVM bitcode file to HSAIL

# enable bash debugging
KMDBSCRIPT="${KMDBSCRIPT:=0}"

# dump the LLVM bitcode
KMDUMPLLVM="${KMDUMPLLVM:=0}"

# dump the brig
KMDUMPBRIG="${KMDUMPBRIG:=0}"

# pass extra options to llc
KMLLOPT="${KMLLOPT:=""}"

if [ $KMDBSCRIPT == "1" ]; then
  set -x
fi

# check command line argument
if [ "$#" -ne 1 ]; then
  echo "Usage: $0 input_LLVM_IR" >&2
  exit 1
fi

if [ ! -f $1 ]; then
  echo "input LLVM IR $1 is not valid" >&2
  exit 1
fi

# Path to AMD library builtins
if [ -d @LLVM_TOOLS_DIR@ ]; then
    NEWLIB=@CPPAMP_SOURCE_DIR@/lib
else
    NEWLIB=@CMAKE_INSTALL_PREFIX@/lib
fi
# Path to HSAIL backend (LLVM-3.6-based)
LLVM_BIN=@HSAIL_BIN@
# Path to HSAILASM
HSAIL_ASM=@HSAIL_COMPILER@

if [ $KMDUMPLLVM == "1" ]; then
  cp $1 ./dump.fe.bc
fi

$LLVM_BIN/llvm-link -suppress-warnings -o $1.linked.bc $1 $NEWLIB/builtins-hsail.opt.bc

if [ $KMDUMPLLVM == "1" ]; then
  cp $1.linked.bc ./dump.linked.bc
fi

$LLVM_BIN/opt -O3 -verify $1.linked.bc -o $1.opt.bc

if [ $KMDUMPLLVM == "1" ]; then
  cp $1.opt.bc ./dump.opt.bc
fi

$LLVM_BIN/llc -O2 -march=hsail64 -filetype=asm -o $1.hsail $1.opt.bc

if [ $KMDUMPBRIG == "1" ]; then
    cp $1.hsail ./dump.hsail
fi

#cat $NEWLIB/new_delete.hsail >> $1.hsail
$HSAIL_ASM -assemble -o $1.brig $1.hsail

if [ $KMDUMPBRIG == "1" ]; then
    cp $1.brig ./dump.new_delete.brig
fi
