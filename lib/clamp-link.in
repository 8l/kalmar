#!/bin/bash

# check number of arguments
if [ "$#" -eq 0 ]; then
  echo "$0 is NOT recommended to be directly used" >&2
  exit 1
fi

if [ -d @LLVM_TOOLS_DIR@ ]; then
    LINK=@LLVM_TOOLS_DIR@/llvm-link
    OPT=@LLVM_TOOLS_DIR@/opt
    CLAMP_DEVICE=@PROJECT_BINARY_DIR@/lib/clamp-device
    CLAMP_EMBED=@PROJECT_BINARY_DIR@/lib/clamp-embed
else
    LINK=@CMAKE_INSTALL_PREFIX@/bin/llvm-link
    OPT=@CMAKE_INSTALL_PREFIX@/bin/opt
    CLAMP_DEVICE=@CMAKE_INSTALL_PREFIX@/bin/clamp-device
    CLAMP_EMBED=@CMAKE_INSTALL_PREFIX@/bin/clamp-embed
fi

################
# link
################

LINK_KERNEL_ARGS=""
LINK_HOST_ARGS=""
LINK_OTHER_ARGS=""
LINK_CPU_ARG=""

TEMP_DIR=`mktemp -d`

# a file which contains the list of __cxxamp_serialize symbols in each CPU object file
CXXAMP_SERIALIZE_SYMBOL_FILE=$TEMP_DIR/symbol.txt
touch $CXXAMP_SERIALIZE_SYMBOL_FILE

ARGS="$@"
for ARG in $ARGS
do
  if [ -f $ARG ]; then
    FILE=`basename $ARG` # remove path
    FILENAME=${FILE%.o}  # check if it's an object file
    CPUFILE=${FILE%.cpu}
    ISCRT=${ARG#/usr}    # exception for objects under /usr
    ISLIB=${ARG#/lib}    # exception for objects under /lib
    if [ $FILENAME != $FILE ] && [ $ISCRT == $ARG ] && [ $ISLIB == $ARG ]; then
      KERNEL_FILE=$TEMP_DIR/$FILENAME.kernel.bc
      HOST_FILE=$TEMP_DIR/$FILENAME.host.o

      # extract kernel section
      objcopy -O binary -j .kernel $ARG $KERNEL_FILE 

      # extract host section
      objcopy -R .kernel $ARG $HOST_FILE

      # strip all symbols specified in symbol.txt from $HOST_FILE
      objcopy @$CXXAMP_SERIALIZE_SYMBOL_FILE $HOST_FILE $HOST_FILE.new
      mv $HOST_FILE.new $HOST_FILE

      # find cxxamp_serialize symbols and save them into symbol.txt
      objdump -t $HOST_FILE -j .text 2> /dev/null | grep "g.*__cxxamp_serialize" | awk '{print "-L"$6}' >> $CXXAMP_SERIALIZE_SYMBOL_FILE

      LINK_KERNEL_ARGS=$LINK_KERNEL_ARGS" "$KERNEL_FILE
      LINK_HOST_ARGS=$LINK_HOST_ARGS" "$HOST_FILE
    elif [[ $CPUFILE != $FILE ]]; then
        cp $ARG $TEMP_DIR/kernel_cpu.o
        LINK_CPU_ARG=$LINK_CPU_ARG" "$TEMP_DIR/kernel_cpu.o
    else
      LINK_OTHER_ARGS=$LINK_OTHER_ARGS" "$ARG
    fi
  else
    LINK_OTHER_ARGS=$LINK_OTHER_ARGS" "$ARG
  fi
done
#echo "kernel args:"$LINK_KERNEL_ARGS
#echo "host args:"$LINK_HOST_ARGS
#echo "other args:"$LINK_OTHER_ARGS

# linker return value
ret=0

# only do kernel lowering if there are objects given
if [ -n "$LINK_KERNEL_ARGS" ]; then

  # combine kernel sections together
  $LINK $LINK_KERNEL_ARGS | $OPT -always-inline - -o $TEMP_DIR/kernel.bc
  
  # lower to SPIR
  if [ "@HAS_OPENCL@" == "1" ]; then
    # lower to SPIR
    $CLAMP_DEVICE $TEMP_DIR/kernel.bc $TEMP_DIR/kernel.spir --spir
    ret=$?
    if [ $ret == 0 ]; then
      # build a new kernel object
      pushd . > /dev/null
      cd $TEMP_DIR
      $CLAMP_EMBED kernel.spir kernel_spir.o
      popd > /dev/null
    fi
  fi
  
  # lower to OpenCL C
  if [ "@HAS_OPENCL@" == "1" ]; then
    # lower to SPIR
    $CLAMP_DEVICE $TEMP_DIR/kernel.bc $TEMP_DIR/kernel.cl --opencl
    ret=$?
    if [ $ret == 0 ]; then
      # build a new kernel object
      pushd . > /dev/null
      cd $TEMP_DIR
      $CLAMP_EMBED kernel.cl kernel.o
      popd > /dev/null
    fi
  fi
  
  # lower to HSA
  if [ "@HAS_HSA@" == "1" ]; then
    # lower to HSAIL
    $CLAMP_DEVICE $TEMP_DIR/kernel.bc $TEMP_DIR/kernel.brig --hsa
    ret=$?
    if [ $ret == 0 ]; then
      # build a new kernel object
      pushd . > /dev/null
      cd $TEMP_DIR
      $CLAMP_EMBED kernel.brig kernel_hsa.o
      popd > /dev/null
    fi
  fi
  
  if [ $ret == 0 ]; then
    # link everything together
    if [ "@HAS_OPENCL@" == "1" ] && [ "@HAS_HSA@" == "1" ]; then
      ld --allow-multiple-definition $TEMP_DIR/kernel.o $TEMP_DIR/kernel_spir.o $TEMP_DIR/kernel_hsa.o $LINK_HOST_ARGS  $LINK_CPU_ARG $LINK_OTHER_ARGS
      ret=$?
    elif [ "@HAS_OPENCL@" == "1" ] && [ "@HAS_HSA@" == "0" ]; then
      ld --allow-multiple-definition $TEMP_DIR/kernel.o $TEMP_DIR/kernel_spir.o $LINK_HOST_ARGS $LINK_CPU_ARG $LINK_OTHER_ARGS
      ret=$?
    elif [ "@HAS_OPENCL@" == "0" ] && [ "@HAS_HSA@" == "1" ]; then
      ld --allow-multiple-definition $TEMP_DIR/kernel_hsa.o $LINK_HOST_ARGS $LINK_CPU_ARG $LINK_OTHER_ARGS
      ret=$?
    else
      echo "Error in C++AMP link!"
      ret=1
    fi
  fi

fi # if [ -n $LINK_KERNEL_ARGS ];

# remove temp files
if [ -e $TEMP_DIR/kernel.o ]; then
  rm $TEMP_DIR/kernel.o
fi

if [ -e $TEMP_DIR/kernel_spir.o ]; then
  rm $TEMP_DIR/kernel_spir.o
fi

if [ -e $TEMP_DIR/kernel_hsa.o ]; then
  rm $TEMP_DIR/kernel_hsa.o
fi

if [ -e $TEMP_DIR/kernel_cpu.o ]; then
  rm $TEMP_DIR/kernel_cpu.o
fi

if [ -e $TEMP_DIR/kernel.cl ]; then
  rm $TEMP_DIR/kernel.bc
fi

if [ -e $TEMP_DIR/kernel.spir ]; then
  rm $TEMP_DIR/kernel.spir
fi

if [ -e $TEMP_DIR/kernel.brig ]; then
  rm $TEMP_DIR/kernel.brig
fi

if [ -e $TEMP_DIR/kernel.bc ]; then
  rm $TEMP_DIR/kernel.bc
fi

if [ -n "$LINK_KERNEL_ARGS" ]; then
  rm $LINK_KERNEL_ARGS # individual kernels
fi

if [ -n "$LINK_HOST_ARGS" ]; then
  rm $LINK_HOST_ARGS # individual host codes
fi

if [ -e $CXXAMP_SERIALIZE_SYMBOL_FILE ]; then
  rm $CXXAMP_SERIALIZE_SYMBOL_FILE # __cxxamp_serialize symbols
fi

if [ -d $TEMP_DIR ]; then
  rm -f $TEMP_DIR/*
  rmdir $TEMP_DIR
fi

# return value
exit $ret
