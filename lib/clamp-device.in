#!/bin/bash
# wraps around commands to produce GPU kernel
# $1 = input ll name
# $2 = OpenCL/SPIR/HSAIL kernel file name
# $3 = (optional) --hsa will trigger HSAIL lowering
#      (optional) --spir will trigger SPIR lowering
#      (optional) --opencl will trigger OpenCL C lowering
#
# in case $3 is not set, then either SPIR or OpenCL C kernel
# will be emitted according to the capability of GPU

# check command line arguments
if [ "$#" -lt 2 ]; then
  echo "Usage: $0 input_LLVM output_kernel (--hsa | --spir | --opencl)" >&2
  echo "  --hsa    will trigger HSAIL/BRIG kernel output" >&2
  echo "  --spir   will trigger SPIR       kernel output" >&2
  echo "  --opencl will trigger OpenCL C   kernel output" >&2
  exit 1
fi

if [ ! -f $1 ]; then
  echo "input LLVM IR $1 is not valid" >&2
  exit 1
fi

if [ -d @LLVM_TOOLS_DIR@ ]; then
    AS=@LLVM_TOOLS_DIR@/llvm-as
    OPT=@LLVM_TOOLS_DIR@/opt
    LLC=@LLVM_TOOLS_DIR@/llc
    LINK=@LLVM_TOOLS_DIR@/llvm-link
    MATH=@OPENCL_MATH_DIR@
    MATHLIB=@CPPAMP_SOURCE_DIR@/lib
    LIB=@LLVM_LIBS_DIR@
    HSATOOLS=@PROJECT_BINARY_DIR@/lib/clamp-hsatools
else
    AS=@CMAKE_INSTALL_PREFIX@/bin/llvm-as
    OPT=@CMAKE_INSTALL_PREFIX@/bin/opt
    LLC=@CMAKE_INSTALL_PREFIX@/bin/llc
    LINK=@CMAKE_INSTALL_PREFIX@/bin/llvm-link
    MATH=@CMAKE_INSTALL_PREFIX@/include
    MATHLIB=@CMAKE_INSTALL_PREFIX@/lib
    LIB=@CMAKE_INSTALL_PREFIX@/lib
    HSATOOLS=@CMAKE_INSTALL_PREFIX@/bin/clamp-hsatools
fi

# emit HSAIL/BRIG kernel
if [ "$3" == "--hsa" ]; then
    if [ "$CLAMP_NOTILECHECK" == "ON" ]; then
      if [ "$ALWAYS_MALLOC" == "ON" ]; then
        $OPT -load $LIB/LLVMPromote@CMAKE_SHARED_LIBRARY_SUFFIX@ \
             -load $LIB/LLVMEraseNonkernel@CMAKE_SHARED_LIBRARY_SUFFIX@ \
           -  promote-globals -promote-privates -erase-nonkernels -malloc-select -alwasy-malloc -dce -S < $1 -o $2.promote.ll.orig
      else
        $OPT -load $LIB/LLVMPromote@CMAKE_SHARED_LIBRARY_SUFFIX@ \
             -load $LIB/LLVMEraseNonkernel@CMAKE_SHARED_LIBRARY_SUFFIX@ \
             -promote-globals -promote-privates -erase-nonkernels -malloc-select -dce -S < $1 -o $2.promote.ll.orig
      fi
    else
      if [ "$ALWAYS_MALLOC" == "ON" ]; then
        $OPT -load $LIB/LLVMPromote@CMAKE_SHARED_LIBRARY_SUFFIX@ \
             -load $LIB/LLVMEraseNonkernel@CMAKE_SHARED_LIBRARY_SUFFIX@ \
             -load $LIB/LLVMTileUniform@CMAKE_SHARED_LIBRARY_SUFFIX@ \
           -  promote-globals -promote-privates -erase-nonkernels -tile-uniform -malloc-select -alwasy-malloc -dce -S < $1 -o $2.promote.ll.orig
      else
        $OPT -load $LIB/LLVMPromote@CMAKE_SHARED_LIBRARY_SUFFIX@ \
             -load $LIB/LLVMEraseNonkernel@CMAKE_SHARED_LIBRARY_SUFFIX@ \
             -load $LIB/LLVMTileUniform@CMAKE_SHARED_LIBRARY_SUFFIX@ \
             -promote-globals -promote-privates -erase-nonkernels -tile-uniform -malloc-select -dce -S < $1 -o $2.promote.ll.orig
      fi
    fi
    if [ $? == 1 ]; then
      echo "Generating HSAIL BRIG kernel failed"
      exit 1
    fi
    sed "s/call /call spir_func /g" < $2.promote.ll.orig > $2.promote.ll
    $AS -o $2.promote.bc $2.promote.ll
    echo "Generating HSA Brig kernel"
    $LINK $MATHLIB/opencl_math.bc $2.promote.bc -o $2 2>/dev/null
    $HSATOOLS $2
    mv -f $2 $2.orig
    mv $2.brig $2
    # remove temp file
    rm $2.promote.ll.orig $2.promote.ll $2.promote.bc
    exit $?
fi

# emit SPIR kernel
if [ "$3" == "--spir" ]; then
    if [ "$CLAMP_NOTILECHECK" == "ON" ]; then
      $OPT -load $LIB/LLVMPromote@CMAKE_SHARED_LIBRARY_SUFFIX@ \
           -load $LIB/LLVMEraseNonkernel@CMAKE_SHARED_LIBRARY_SUFFIX@ \
           -promote-globals -erase-nonkernels -dce < $1 -o $2.promote.bc
    else
      $OPT -load $LIB/LLVMPromote@CMAKE_SHARED_LIBRARY_SUFFIX@ \
           -load $LIB/LLVMEraseNonkernel@CMAKE_SHARED_LIBRARY_SUFFIX@ \
           -load $LIB/LLVMTileUniform@CMAKE_SHARED_LIBRARY_SUFFIX@ \
           -promote-globals -erase-nonkernels -tile-uniform -dce < $1 -o $2.promote.bc
    fi
    if [ $? == 1 ]; then
      echo "Generating OpenCL SPIR kernel failed"
      exit 1
    fi
    echo "Generating OpenCL SPIR kernel"
    $LINK $MATHLIB/opencl_math.bc $2.promote.bc -o $2 2>/dev/null
    # remove temp file
    rm $2.promote.bc
    exit $?
fi

# emit OpenCL C kernel
if [ "$3" == "--opencl" ]; then
    if [ "$CLAMP_NOTILECHECK" == "ON" ]; then
      $OPT -load $LIB/LLVMPromote@CMAKE_SHARED_LIBRARY_SUFFIX@ \
           -load $LIB/LLVMEraseNonkernel@CMAKE_SHARED_LIBRARY_SUFFIX@ \
           -promote-globals -erase-nonkernels -dce < $1 -o $2.promote.bc
    else
      $OPT -load $LIB/LLVMPromote@CMAKE_SHARED_LIBRARY_SUFFIX@ \
           -load $LIB/LLVMEraseNonkernel@CMAKE_SHARED_LIBRARY_SUFFIX@ \
           -load $LIB/LLVMTileUniform@CMAKE_SHARED_LIBRARY_SUFFIX@ \
           -promote-globals -erase-nonkernels -tile-uniform -dce < $1 -o $2.promote.bc
    fi
    if [ $? == 1 ]; then
      echo "Generating OpenCL C kernel failed"
      exit 1
    fi
    echo "Generating OpenCL C kernel"
    $LLC $2.promote.bc -march=c -o - |cat $MATH/opencl_math.cl - > $2

    if grep -q " double " $2; then
        cat $MATHLIB/opencl_prefix.cl $2 > $2.t
        mv -f $2.t $2
    fi
    # remove temp file
    rm $2.promote.bc
    exit $?
fi


hasSPIR() {
    [ -z "$CLAMP_NOSPIR" -a -x /usr/bin/clinfo ] && ( /usr/bin/clinfo|grep cl_khr_spir > /dev/null )
    return $?
}
# if there is no mode specified, fallback to default behavior
if [ "$CLAMP_NOTILECHECK" == "ON" ]; then
  $OPT -load $LIB/LLVMPromote@CMAKE_SHARED_LIBRARY_SUFFIX@ \
       -load $LIB/LLVMEraseNonkernel@CMAKE_SHARED_LIBRARY_SUFFIX@ \
       -promote-globals -erase-nonkernels -dce < $1 -o $2.promote.bc
else
  $OPT -load $LIB/LLVMPromote@CMAKE_SHARED_LIBRARY_SUFFIX@ \
       -load $LIB/LLVMEraseNonkernel@CMAKE_SHARED_LIBRARY_SUFFIX@ \
       -load $LIB/LLVMTileUniform@CMAKE_SHARED_LIBRARY_SUFFIX@ \
       -promote-globals -erase-nonkernels -tile-uniform -dce < $1 -o $2.promote.bc
fi
if [ $? == 1 ]; then
  echo "Generating OpenCL kernel failed"
  exit 1
fi
if hasSPIR; then
    echo "Generating OpenCL SPIR kernel"
    $LINK $MATHLIB/opencl_math.bc $2.promote.bc -o $2 2>/dev/null
    # remove temp file
    rm $2.promote.bc
    exit $?
else
    echo "Generating OpenCL C kernel"
    $LLC $2.promote.bc -march=c -o - |cat $MATH/opencl_math.cl - > $2

    if grep -q " double " $2; then
        cat $MATHLIB/opencl_prefix.cl $2 > $2.t
        mv -f $2.t $2
    fi
    # remove temp file
    rm $2.promote.bc
    exit $?
fi
